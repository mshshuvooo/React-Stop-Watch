{"version":3,"sources":["components/title/Title.js","components/countdown/digit/Digit.js","components/countdown/CountDown.js","components/controller/Controller.js","components/laps/Laps.js","App.js","serviceWorker.js","index.js"],"names":["Title","state","title","inputBox","event","this","setState","target","value","key","titleOutput","className","type","onChange","inputChange","onKeyPress","pressEnter","onBlur","unFocus","onClick","editHandelar","Component","Digit","style","borderColor","props","color","CountDown","time","min","sec","mili","Controller","start","pause","lap","reset","conOutput","startHandler","pauseHandler","lapHandler","resetHandler","getController","Laps","laps","map","index","App","interValID","setInterval","clearInterval","lepTime","getstart","getPause","getReset","getLap","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8335f9b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Title.css'\n\nclass Title extends Component {\n\n\n    state = {\n        title: 'This is a dummy title',\n        inputBox: false\n    }\n\n    editHandelar(event){\n        this.setState({\n            ...this.state,\n            inputBox: true\n        })\n    }\n\n    inputChange(event){\n        this.setState({\n            ...this.state,\n            title: event.target.value\n        })\n    }\n\n    pressEnter(event){\n        if(event.key === 'Enter'){\n            this.setState({\n                ...this.state,\n                inputBox: false\n            })\n        }\n    }\n\n    unFocus(event){\n        this.setState({\n            ...this.state,\n            inputBox: false\n        })\n    }\n    \n\n    render() {\n        \n        let titleOutput = null ;\n\n        if(this.state.inputBox){\n            titleOutput = (\n                <div className=\"section-title-input\">\n                    <input \n                        className=\"form-control\" \n                        type=\"text\" \n                        value = { this.state.title } \n                        onChange = { (event) => this.inputChange(event) }\n                        onKeyPress = { (event) => this.pressEnter(event) }\n                        onBlur = { (event) => this.unFocus(event) }\n                    />\n                </div>\n            )\n        }else{\n            titleOutput = (\n                <div className=\"d-flex section-title\">\n                    <h1 className=\"display-4\">{this.state.title}</h1>\n                    <span onClick={(event) => this.editHandelar(event) } className=\"ml-auto edit-icon\">\n                        <i className=\"fa fa-pencil\"></i>\n                    </span>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n               {titleOutput} \n            </div>\n        )\n    }\n}\n\nexport default Title;\n","import React, { Component } from 'react'\nimport './Digit.css'\n\nclass Digit extends Component {\n    render() {\n        return (\n            <div style={{borderColor: this.props.color}} className=\"digit\">\n                <h1 style={{color:this.props.color}}>\n                    {this.props.value < 10 ? `0${this.props.value}` : this.props.value}\n                </h1>\n            </div>\n        )\n    }\n}\n\nexport default Digit;\n","import React, { Component } from 'react'\nimport Digit from './digit/Digit'\n\nclass CountDown extends Component {\n    render() {\n        return (\n            <div className=\"d-flex\">\n                <Digit color=\"#1ab9fa\" value={this.props.time.min} />\n                <Digit color=\"#e66e01\" value={this.props.time.sec} />\n                <Digit color=\"#4a1475\" value={this.props.time.mili} />\n            </div>\n        )\n    }\n}\n\nexport default CountDown;\n","import React, { Component } from 'react'\nimport './Controller.css'\n\nclass Controller extends Component {\n\n    state ={\n        start: true,\n        pause: false,\n        lap: false,\n        reset: false\n    }\n\n    startHandler(){\n        this.setState({\n            ...this.state,\n            start: false,\n            pause: true,\n            lap: true,\n        });\n\n        this.props.start();\n    }\n\n    pauseHandler(){\n        this.setState({\n            ...this.state,\n            start: true,\n            pause: false,\n            lap: false,\n            reset: true,\n        });\n\n        this.props.pause();\n    }\n\n    lapHandler(){\n        this.props.lap()\n    }\n\n    resetHandler(){\n        this.setState({\n            start: true,\n            pause: false,\n            lap: false,\n            reset: false\n        });\n\n        this.props.reset();\n\n    }\n\n    getController(){\n        let conOutput = null;\n\n        if( this.state.start && !this.state.reset ){\n            conOutput =(\n                <div>\n                    <button \n                        onClick ={ (event) => this.startHandler(event) }\n                        className=\"btn btn-success btn-lg px-5\">Start\n                    </button>\n                </div>\n            )\n        }else if( this.state.pause && this.state.lap ){\n            conOutput =(\n                <div>\n                    <button \n                        onClick ={ (event) => this.pauseHandler(event) }\n                        className=\"btn btn-primary btn-lg px-5\">Pause\n                    </button>\n                    <button \n                        onClick ={ (event) => this.lapHandler(event) }\n                        className=\"btn btn-warning btn-lg px-5\">Lap\n                    </button>\n                </div>\n            )\n        }else if( this.state.start && this.state.reset ){\n            conOutput =(\n                <div>\n                    <button \n                        onClick ={ (event) => this.startHandler(event) }\n                        className=\"btn btn-success btn-lg px-5\">Start\n                    </button>\n                    <button \n                        onClick ={ (event) => this.resetHandler(event) }\n                        className=\"btn btn-danger btn-lg px-5\">Reset\n                    </button>\n                </div>\n            )\n        }\n\n        return conOutput;\n    }\n\n    render() {\n        return (\n            <div className=\"controller-btns\">\n                {this.getController()}\n            </div>\n        )\n    }\n}\n\nexport default Controller; \n","import React, { Component } from 'react'\n\nclass Laps extends Component {\n    render() {\n        return (\n            <ul className=\"list-group list-group-flush\">\n                { this.props.laps.map((lap, index) => {\n                    return (\n                        <li key={ index } className=\"list-group-item\">\n                            <h4>\n                                <span className=\"text-dark mr-1\">Minute:</span>\n                                <span className=\"text-danger mr-3\">{ lap.min }</span>\n                                <span className=\"text-dark mr-1\">Second: </span>\n                                <span className=\"text-danger mr-3\">{ lap.sec }</span>\n                                <span className=\"text-dark mr-1\">Mili: </span>\n                                <span className=\"text-danger\">{ lap.mili }</span>\n                            </h4>\n                        </li>\n                    )\n                }) }\n            </ul>\n        )\n    }\n}\n\nexport default Laps;\n","import React, { Component } from 'react'\nimport './App.css'\nimport Title from './components/title/Title'\nimport CountDown from './components/countdown/CountDown'\nimport Controller from './components/controller/Controller'\nimport Laps from './components/laps/Laps'\n\n\n\n\n\nclass App extends Component {\n\n  state = {\n    time: {\n      min: 0,\n      sec: 0,\n      mili: 0\n    },\n    laps: []\n  }\n\n  getstart(){\n    this.interValID =  setInterval(() => {\n      let min = this.state.time.min;\n      let sec = this.state.time.sec;\n      let mili = this.state.time.mili;\n\n      if( mili >= 10 ){\n        sec = sec + 1\n        mili = 0\n      }\n\n      if( sec >= 60 ){\n        min = min + 1\n        sec = 0\n      }\n\n      this.setState({\n        time:{\n          min,\n          sec,\n          mili: mili + 1\n        }\n      })\n\n    }, 100)\n  }\n\n  getPause(){\n    clearInterval(this.interValID)\n  }\n\n  getLap(){\n    let lepTime = {\n      ...this.state.time\n    }\n\n    this.setState({\n      ...this.state,\n      laps: [ lepTime, ...this.state.laps ]\n    })\n    \n\n\n  }\n\n  getReset(){\n    this.setState({\n      time: {\n        min: 0,\n        sec: 0,\n        mili: 0\n      },\n      laps: []\n\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container py-5\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-lg-8\">\n              <Title/>\n              <CountDown time={this.state.time} />\n              <Controller \n                start= { () => this.getstart() }\n                pause= { () => this.getPause() } \n                reset= { () => this.getReset() }\n                lap= { () => this.getLap() }\n              />\n              <Laps className=\"my-5\" laps={ this.state.laps } />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}